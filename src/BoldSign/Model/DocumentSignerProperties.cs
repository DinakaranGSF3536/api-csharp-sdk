/* 
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace BoldSign.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;
    using Newtonsoft.Json;

    /// <summary>
    ///     The document signer properties.
    /// </summary>
    [DataContract]
    public class DocumentSignerProperties
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="DocumentSignerProperties" /> class.
        /// </summary>
        /// <param name="signerEmail">Gets or sets the signer email..</param>
        /// <param name="signerName">Gets or sets the signer name..</param>
        /// <param name="status">status.</param>
        /// <param name="isAuthenticationFailed">
        ///     &lt;br&gt;Gets or sets a value indicating whether authentication is failed.  &lt;
        ///     br&gt;When value is null, Authentication is not enabled for the signer.  &lt;br&gt;When value is true,
        ///     Authentication is failed by the signer.  &lt;br&gt;When value is false, Authentication is enabled for the signer.
        ///     (default to false).
        /// </param>
        /// <param name="order">Gets or sets the signer order. (default to 0).</param>
        /// <param name="privateMessage">
        ///     &lt;br&gt;Gets or sets the private message.  &lt;br&gt;Available only when the user is
        ///     document sender or sender admin..
        /// </param>
        public DocumentSignerProperties(string signerEmail = default, string signerName = default, SignerStatus? status = default, bool? isAuthenticationFailed = false, int order = 0, string privateMessage = default)
        {
            this.SignerEmail = signerEmail;
            this.SignerName = signerName;
            this.IsAuthenticationFailed = isAuthenticationFailed;
            this.PrivateMessage = privateMessage;
            this.SignerEmail = signerEmail;
            this.SignerName = signerName;
            this.Status = status;

            // use default value if no "isAuthenticationFailed" provided
            if (isAuthenticationFailed == null)
            {
                this.IsAuthenticationFailed = false;
            }
            else
            {
                this.IsAuthenticationFailed = isAuthenticationFailed;
            }

            // use default value if no "order" provided
            if (order == null)
            {
                this.Order = 0;
            }
            else
            {
                this.Order = order;
            }

            this.PrivateMessage = privateMessage;
        }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public SignerStatus? Status { get; set; }

        /// <summary>
        ///     Gets or sets the signer email.
        /// </summary>
        /// <value>Gets or sets the signer email.</value>
        [DataMember(Name = "signerEmail", EmitDefaultValue = true)]
        public string SignerEmail { get; set; }

        /// <summary>
        ///     Gets or sets the signer name.
        /// </summary>
        /// <value>Gets or sets the signer name.</value>
        [DataMember(Name = "signerName", EmitDefaultValue = true)]
        public string SignerName { get; set; }

        /// <summary>
        ///     &lt;br&gt;Gets or sets a value indicating whether authentication is failed.  &lt;br&gt;When value is null,
        ///     Authentication is not enabled for the signer.  &lt;br&gt;When value is true, Authentication is failed by the
        ///     signer.  &lt;br&gt;When value is false, Authentication is enabled for the signer.
        /// </summary>
        /// <value>
        ///     &lt;br&gt;Gets or sets a value indicating whether authentication is failed.  &lt;br&gt;When value is null,
        ///     Authentication is not enabled for the signer.  &lt;br&gt;When value is true, Authentication is failed by the
        ///     signer.  &lt;br&gt;When value is false, Authentication is enabled for the signer.
        /// </value>
        [DataMember(Name = "isAuthenticationFailed", EmitDefaultValue = true)]
        public bool? IsAuthenticationFailed { get; set; }

        /// <summary>
        ///     Gets or sets the signer order.
        /// </summary>
        /// <value>Gets or sets the signer order.</value>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public int Order { get; set; }

        /// <summary>
        ///     &lt;br&gt;Gets or sets the private message.  &lt;br&gt;Available only when the user is document sender or sender
        ///     admin.
        /// </summary>
        /// <value>
        ///     &lt;br&gt;Gets or sets the private message.  &lt;br&gt;Available only when the user is document sender or sender
        ///     admin.
        /// </value>
        [DataMember(Name = "privateMessage", EmitDefaultValue = true)]
        public string PrivateMessage { get; set; }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}
