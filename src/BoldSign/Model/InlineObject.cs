/* 
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace BoldSign.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.IO;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;
    using Newtonsoft.Json;

    /// <summary>
    ///     InlineObject
    /// </summary>
    [DataContract]
    public class InlineObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="InlineObject" /> class.
        /// </summary>
        [JsonConstructor]
        protected InlineObject()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="InlineObject" /> class.
        /// </summary>
        /// <param name="files">Gets or sets list of files. (required).</param>
        /// <param name="title">Gets or sets document title. (required).</param>
        /// <param name="message">Gets or sets document message or description..</param>
        /// <param name="signers">Gets or sets document Signers. (required).</param>
        /// <param name="cC">Gets or sets document CC..</param>
        /// <param name="formFields">Gets or sets document Form fields such as Sign, Checkbox, Radio buttons etc. (required).</param>
        /// <param name="enableSigningOrder">
        ///     Gets or sets a value indicating whether to enable signing order for the document
        ///     signer..
        /// </param>
        /// <param name="enableDigitalSignature">Gets or sets a value indicating whether digital signature is required..</param>
        /// <param name="expiryDays">Gets or sets the expiry days..</param>
        /// <param name="enablePrintAndSign">Gets or sets a value indicating whether to enable Print and Sign mode..</param>
        /// <param name="reminderDate">Gets or sets the reminder date..</param>
        /// <param name="reminderFrequency">reminderFrequency.</param>
        /// <param name="disableEmails">
        ///     Gets or sets a value indicating whether to enable embedded signing.  When
        ///     EmbeddedSigning is enabled, Reminder is automatically ignored..
        /// </param>
        public InlineObject(List<Stream> files = default, string title = default, string message = default, List<DocumentSigner> signers = default, List<DocumentCC> cC = default, List<FormField> formFields = default, bool enableSigningOrder = default, bool enableDigitalSignature = default, int? expiryDays = default, bool enablePrintAndSign = default, DateTime? reminderDate = default, ReminderType? reminderFrequency = default, bool disableEmails = default)
        {
            // to ensure "files" is required (not null)
            if (files == null)
            {
                throw new InvalidDataException("files is a required property for InlineObject and cannot be null");
            }

            this.Files = files;

            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for InlineObject and cannot be null");
            }

            this.Title = title;

            this.Message = message;

            // to ensure "signers" is required (not null)
            if (signers == null)
            {
                throw new InvalidDataException("signers is a required property for InlineObject and cannot be null");
            }

            this.Signers = signers;

            this.CC = cC;

            // to ensure "formFields" is required (not null)
            if (formFields == null)
            {
                throw new InvalidDataException("formFields is a required property for InlineObject and cannot be null");
            }

            this.FormFields = formFields;

            this.ExpiryDays = expiryDays;
            this.ReminderDate = reminderDate;
            this.Message = message;
            this.CC = cC;
            this.EnableSigningOrder = enableSigningOrder;
            this.EnableDigitalSignature = enableDigitalSignature;
            this.ExpiryDays = expiryDays;
            this.EnablePrintAndSign = enablePrintAndSign;
            this.ReminderDate = reminderDate;
            this.ReminderFrequency = reminderFrequency;
            this.DisableEmails = disableEmails;
        }

        /// <summary>
        ///     Gets or Sets ReminderFrequency
        /// </summary>
        [DataMember(Name = "ReminderFrequency", EmitDefaultValue = false)]
        public ReminderType? ReminderFrequency { get; set; }

        /// <summary>
        ///     Gets or sets list of files.
        /// </summary>
        /// <value>Gets or sets list of files.</value>
        [DataMember(Name = "Files", EmitDefaultValue = true)]
        public List<Stream> Files { get; set; }

        /// <summary>
        ///     Gets or sets document title.
        /// </summary>
        /// <value>Gets or sets document title.</value>
        [DataMember(Name = "Title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        ///     Gets or sets document message or description.
        /// </summary>
        /// <value>Gets or sets document message or description.</value>
        [DataMember(Name = "Message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        ///     Gets or sets document Signers.
        /// </summary>
        /// <value>Gets or sets document Signers.</value>
        [DataMember(Name = "Signers", EmitDefaultValue = true)]
        public List<DocumentSigner> Signers { get; set; }

        /// <summary>
        ///     Gets or sets document CC.
        /// </summary>
        /// <value>Gets or sets document CC.</value>
        [DataMember(Name = "CC", EmitDefaultValue = true)]
        public List<DocumentCC> CC { get; set; }

        /// <summary>
        ///     Gets or sets document Form fields such as Sign, Checkbox, Radio buttons etc.
        /// </summary>
        /// <value>Gets or sets document Form fields such as Sign, Checkbox, Radio buttons etc.</value>
        [DataMember(Name = "FormFields", EmitDefaultValue = true)]
        public List<FormField> FormFields { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether to enable signing order for the document signer.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to enable signing order for the document signer.</value>
        [DataMember(Name = "EnableSigningOrder", EmitDefaultValue = false)]
        public bool EnableSigningOrder { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether digital signature is required.
        /// </summary>
        /// <value>Gets or sets a value indicating whether digital signature is required.</value>
        [DataMember(Name = "EnableDigitalSignature", EmitDefaultValue = false)]
        public bool EnableDigitalSignature { get; set; }

        /// <summary>
        ///     Gets or sets the expiry days.
        /// </summary>
        /// <value>Gets or sets the expiry days.</value>
        [DataMember(Name = "ExpiryDays", EmitDefaultValue = true)]
        public int? ExpiryDays { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether to enable Print and Sign mode.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to enable Print and Sign mode.</value>
        [DataMember(Name = "EnablePrintAndSign", EmitDefaultValue = false)]
        public bool EnablePrintAndSign { get; set; }

        /// <summary>
        ///     Gets or sets the reminder date.
        /// </summary>
        /// <value>Gets or sets the reminder date.</value>
        [DataMember(Name = "ReminderDate", EmitDefaultValue = true)]
        public DateTime? ReminderDate { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether to enable embedded signing.  When EmbeddedSigning is enabled, Reminder is
        ///     automatically ignored.
        /// </summary>
        /// <value>
        ///     Gets or sets a value indicating whether to enable embedded signing.  When EmbeddedSigning is enabled, Reminder
        ///     is automatically ignored.
        /// </value>
        [DataMember(Name = "DisableEmails", EmitDefaultValue = false)]
        public bool DisableEmails { get; set; }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}
